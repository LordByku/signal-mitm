import binascii

import signal_protocol.error

recipient_service_id = "PNI:99e43335-6aec-4973-85dd-92d93d12f6d3"
recipient_e164 = "+41792685111"  # todo: redacted

# local_service_id = b"62214145-93c6-4f56-9a9c-35714b948d51"
# local_e164 = "+41782517981"
recipient_s_protocol_addr = recipient_service_id + ".1"

contentHint = "RESENDABLE"
# ((EnvelopeContent.Encrypted) content).dataMessage
msg = "Hoi"
# msg_id = 95
timestamp = 1723969218224
requiredProtocolVersion = 0
profileKeyHex = "352a4d17186cfc2e5471b182f6c18119f1880c538a764885a2f227d0aa9dfe92"

# uak <- HexFormat.of().formatHex(getTargetUnidentifiedAccess(unidentifiedAccess).value.unidentifiedAccessKey)
# uak = "e128ff6c596fceeb48536dbd007d07e5"

####### aciStore (dumped from android)
# <- ((SignalServiceAccountDataStoreImpl) aciStore).identityKeyStore.getIdentity(new SignalProtocolAddress(recipient.getIdentifier(), 1))

## deviceId == 1
from signal_protocol.identity_key import IdentityKey, IdentityKeyPair
from signal_protocol.curve import PublicKey
from signal_protocol.address import DeviceId, ProtocolAddress
from signal_protocol.state import PreKeyBundle, PreKeyId, SignedPreKeyId, KyberPreKeyId

# registraion_id = 2036
local_registration_id = 699
registraion_id = 2036
## load IK
rIk_hex = "0566810a0445995bd7acc1cf372db41c5ea687e1457f9791d9a13fe1d8493ea616"
rIdentityKey_bytes = binascii.unhexlify(rIk_hex)
assert rIdentityKey_bytes[0] == 5  # keyType
rIK = IdentityKey(rIdentityKey_bytes)
assert rIK.serialize().hex() == rIk_hex, "bad recipient identiity key"

## load spk + id
spk_id = SignedPreKeyId(4001897)
spk_hex = "0545aedc51eb485c0cd7730e3ecc87ffbbd4feb182243d5463cd3af88706e6991a"
spk_bytes = binascii.unhexlify(spk_hex)
assert spk_bytes[0] == 5
spk = PublicKey.deserialize(spk_bytes)
assert spk.serialize().hex() == spk_hex
spk_sig_hex = "8b481a44da1ffe8028a67d53742e5c2e477e9add302495c3d6c52bbe1c61a6dcae167f7236c819d404d37e948916a28b4951a7a22046bfc53bf9416e06c97e80"
spk_sig = binascii.unhexlify(spk_sig_hex)

pre_key_id = PreKeyId(4989755)
pre_key_hex = "0541240840329d6568f0ce02cfcfa33217f07ab274b1f10d2f75524ea4901d826f"
pre_key_bytes = binascii.unhexlify(pre_key_hex)
assert pre_key_bytes[0] == 5
pre_key = PublicKey.deserialize(pre_key_bytes)
assert pre_key.serialize().hex() == pre_key_hex

from signal_protocol.kem import PublicKey as KemPublicKey
kyber_id = KyberPreKeyId(16482865)
kyber_hex = "08e1f634782486fa85c76ae5c6fd7130caf045d1452303c0a818268b76c032c086ab6f3646f230aedab2bd5a990a3e528e14139446509506e47a8136be08ba7423476804b5c899da053cb2cdc6d4269685318f85447c310ef8f5331dd64e183b2653cc766abca1de9b642e0c961ea3caf6750017fcb00e1134c35b4423263d8613610c1284469bcbfb1571dd6c4302223a86b0be0938136e75a6cb377e08a8978e025a15a39b03f14917359fa81802d3457458581765c133e99036413012184661c15b6495911f9d2c31d777cb58f34ab6574f9ba9a0a592860b4bbbc7d214b1613ea8c9882f7b0f00f67551e087a0e623193caf45672ee80b794b7ac884351d44145f2af94f3f0801e17b4f38ac46f42a87b4284f31a00f3cd709198a922e94b91a8905068c38c4339c5a83cb04daca7b077df61778a534a9373b5945c8cd797bc465d73ed9cc1ff9c3aaf4959fd9fc2632b2cf9bb691cce62dc2c303ad93361e383027d7036822ba98e2353c663b631bbfa56a52dd0c83c3aa00657305dfaa13ba0a74335989d2405ee767804fc99ba9a3a50c400522094a41796be4969d89fc09e3966842460dde46876a1970186991827a61218a8e2449cbebf9b62ed221c0243d0e7c2cd0501e2d984637148deec1ac46f70e97a5b190b937c31a07cc2b8d35588741f6ae09c66e6a1061cb1225b8539a301424071c2ef6b67eb2bb67e7c03b3a14bb1f51226986c056bab98c988133392f7faa806287a372073dd3d6233f2c5cf69b84d1a385b5f17a06895cb7475224a22342092d9797371e81408628ae9f79c53daab48864ad2ad804ffca99fef54a8e9017b4a1cd538046a2203cbb80cf1b07b178f010bf409c21fa61bbdc6eed527853b3b3be258656d44f5e816f8e700a5cf2991f79bf718749171928dcb109b607a68558a4213b8f882b8bd2fab44d7287ce9aa80a4549da3115794c4542045694bc49bfc6ce525095a418bb2716b6edd823cee9325198037ce10db2489ff43a8fd2057f700b71c85ca51779ab78e608bb887528a8095869158a83aec3e0c7b4871a2cb32d2a6aa5dbe41bb8aba5f8d883bb1328ba1357a4452448089d2b08887867af20ca3906024c2a73b8898b09ba9b3275cbb08703cf6fe4669e13996ac06c65b1863a94a6d14c77f0e12af933b93d5a2a9c91cb620a508e78229ef338f7aa543177b6aa962933d264b221c2d8429789c23e001b48bf179835e5a0c2566c3a952acc855f5b524bc2ca47d0b254649c867c002f10642349e9573e2834f6fa5ec2124e07241f5eb377c30c65f0343d4ff90fbc6c7c4257b433c4bf17012a9ea985c593974261cea3a228276a7c2d329bf4fcb4acc03b092b496c2a15bd419b68860bfbc395e064823291853369b9b6f62c9fa07a79c09ca7b97c6ea5032e295d34e90ed6b7155296166e457fc494c963d75354e265498326c1a3057ba22998fc452dd51ffee0212df550009565decacd3f1a8505f599ca8c75bcc8854f7579831950e1ea4401755cd7e812f5525bf9904ae0624f3647b496e9a0c74c12b914279543ab0e8a6da0c630edfbad430cb75cd9537e56431c01c2d26b242e83c88b621c42f0bcc33298165593feea263cd9c42597b5b9a5a6e9abad2f969d4500c29fe62c44e97a27db853f2a030811328e682fe41acee1cb66687362cc020e31256f81b69f12e7130636b57ca888cbd092c16b48db965059a3a0809cc013299244c07ebdb41be5220c4d8cc39ed456f7245a7ac30822098864370dc982a8442cbe4c61746be05595279c64247ec757a26f6637cc2c8e0269203200be81e69c8f71333fb78175e953f76a639f5477a93a6e9d5661222623541730cda1419863b82bd477a0e67f2cd740acd414b6427169f4b891a86d5f8475554165fec186041305e7f7cc52c9306298aded06c258a3ad503376b3f2b9749a8e12c4c1264b8c21335417a12a188c63f4bb755787c13c1b9b3c232147f011dd836c597ac653a56c69d21fa48a6d116c54c601a2042b7e9d8c55af8b520bb63b7140807566c27583c7c0b2b92f8c9ef0f36c13818ebfd142e554a612b512c3896c86d613fef74cabd00accd74ee442019c440e3eb76f6ae35ced8c41a9e9129456726af81d8af67e80332cef89be1bf605437b933146ce7353919805702993c1f25d07d8bb11d1c152cf44ae21120cbf8039f38d556cd3"
kyber_bytes = binascii.unhexlify(kyber_hex)
assert kyber_bytes[0] == 8
kyber_key = KemPublicKey.deserialize(kyber_bytes)
assert kyber_key.serialize().hex() == kyber_hex
kyber_sig_hex = "9ac3dbc9f02756774a61ce8523fa2ec73f550f1558540c8676a278b8984e3936f8c333bd124ada26da0cf6e1d07304d5b8e6b4b316a432aa5a9fc61b61d5878b"
kyber_sig = binascii.unhexlify(kyber_sig_hex)


b_bundle = PreKeyBundle(registraion_id, device_id=DeviceId(1),
                        pre_key_public=(pre_key_id, pre_key),
                        signed_pre_key_id=spk_id,
                        signed_pre_key_public=spk,
                        signed_pre_key_signature=spk_sig,
                        identity_key=rIK).with_kyber_pre_key(
    kyber_id,
    kyber_key,
    kyber_sig
)

print(f"Does recipient bundle have kyber: {b_bundle.has_kyber_pre_key()} (expected Yes)")
from signal_protocol.storage import InMemSignalProtocolStore

own_kp_hex = "0a210553ea62ad2bcd39bc024d59d2670082e7871aa86369d24be804bdd02a48c230611220e0804bc15bdf42e0aa397e09fc0a41b939fdd0ac695259709bd4ecabf9821040"
own_keypair = IdentityKeyPair.from_bytes(binascii.unhexlify(own_kp_hex))
assert own_keypair.serialize().hex() == own_kp_hex

store = InMemSignalProtocolStore(own_keypair, local_registration_id)
from signal_protocol.session import process_prekey_bundle, process_prekey

recipient_address = ProtocolAddress(recipient_service_id, 1)
process_prekey_bundle(recipient_address, store, b_bundle)
# print(store)
print(store.load_session(recipient_address))
# store.
# ((SignalServiceAccountDataStoreImpl) aciStore).preKeyStore.loadSignedPreKeys().get(0).getId()

try:
    print(store.get_kyber_pre_key(kyber_id))
except signal_protocol.error.SignalProtocolException:
    # print(store.all_signed_pre_key_ids())
    session = store.load_session(recipient_address)
    print(session.remote_registration_id())
#######

from protos.gen.SignalService_pb2 import DataMessage, Content

content = Content()
content.dataMessage.profileKey = binascii.unhexlify(profileKeyHex)
content.dataMessage.body = msg
content.dataMessage.timestamp = timestamp
content.dataMessage.requiredProtocolVersion = requiredProtocolVersion
# content.dataMessage = dm
print(content)

# dm from signal
dm2 = Content()
message_content_hex = "0a300a03486f693220352a4d17186cfc2e5471b182f6c18119f1880c538a764885a2f227d0aa9dfe9238b0cdcaa496326000"
dm2.ParseFromString(binascii.unhexlify(message_content_hex))
print(dm2)

assert content.SerializeToString() == dm2.SerializeToString()
assert content.SerializeToString().hex() == message_content_hex




expexted_padded_msg = "0a300a03486f693220352a4d17186cfc2e5471b182f6c18119f1880c538a764885a2f227d0aa9dfe9238b0cdcaa49632600080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
from utils import PushTransportDetails
assert PushTransportDetails.get_padded_message_body(content.SerializeToString()) == binascii.unhexlify(expexted_padded_msg)
to_enc = PushTransportDetails.get_padded_message_body(content.SerializeToString())
assert (len(to_enc) + 1) % 160 == 0  # the remaining byte is added by the encryption (padding). 160 = blocksize*10 for obfuscation
assert PushTransportDetails.get_stripped_padding_message_body(to_enc) == content.SerializeToString()

from signal_protocol import session_cipher
from signal_protocol.protocol import CiphertextMessage, PreKeySignalMessage
ctxt_message: CiphertextMessage = session_cipher.message_encrypt(store, recipient_address, to_enc)

PREKEY_CTXT_TYPE = 3
assert ctxt_message.message_type() == PREKEY_CTXT_TYPE
# print(ctxt_message.serialize().hex())
pksm_ctxt = PreKeySignalMessage.try_from(ctxt_message.serialize())

from protos.gen.wire_pb2 import PreKeySignalMessage as PreKeySignalMessageProto, SignalMessage as SignalMessageProto
base_key_hex = "051a9e054276f847496552a1a6a54ffb051f9eaa3ab3c6a3a8465d4ba1d2d34959"
base_key = PublicKey.deserialize(binascii.unhexlify(base_key_hex))
assert base_key.serialize().hex() == base_key_hex


own_ik_pubhex = "055c858d9580868001692fb5c3fe0e919feff7fa53cc137f516ea5be22e154cf36"
own_ik_pub = IdentityKey(binascii.unhexlify(own_ik_pubhex))
assert own_ik_pub.serialize().hex() == own_ik_pubhex

from signal_protocol.protocol import SignalMessage, PreKeySignalMessage

pksm = PreKeySignalMessageProto()
inner_msg = SignalMessageProto()
inner_msg.ciphertext = b""
inner_msg.counter = 0
inner_msg.previous_counter = 0

pksm.registration_id = local_registration_id
pksm.pre_key_id = pre_key_id.get_id()
pksm.signed_pre_key_id = spk_id.get_id()
pksm.kyber_pre_key_id = kyber_id.get_id()
# pksm.kyber_ciphertext =
pksm.base_key = base_key.serialize()
pksm.identity_key = own_ik_pub.serialize()
pksm.message = inner_msg.SerializeToString()

# pksm.kyber_pre_key_id =
# print(pksm)
# print(pksm.SerializeToString().hex())

pksm2_hex = "4408bbc6b0021221051a9e054276f847496552a1a6a54ffb051f9eaa3ab3c6a3a8465d4ba1d2d349591a210553ea62ad2bcd39bc024d59d2670082e7871aa86369d24be804bdd02a48c2306122d301440a2105fa6815abe2e1ca99ee379191901d2c9c0576b56190d118897a59e19c0260b00f1000180022a001ad210cda198754510efbfa77540f57da350478544a3a5667551e93f5ac6b7f616f60e8613f0f9c77c853fb5f64a7195ccf34bfee7d934a3578dd4037f871d0e70f74557525edb5650292e7c81b031f42eb4e772b88e9296bf2f113b81cb0ab42196c62c9aec960476360068924947baf2b93b6d05ed790289d70bd27b843e5a1c1c0df38681bdf267db86082bccb268f4131af5faa7c39f0eb562945049a345ca6353abdc3b960aa28bb0530e9a0f40138b184ee0742a10c0854dc8b650a53436f89be4e2f58b6956ba6dd7b4dd60d9060c9fcec09ced6e23d3177c2a6c621fbb86c3e095de9ef17ebbeaf1680db99e37a408122626e512c4865be26c926d9a7e821d8ab10b2d95044a64f2a2db7623428a5714a12baf573281dfbea473633ffd84b380e251758ae0d4027a12cc7746843ca8f6dcbb7accaf723b656647bbe5d3844f4a9f05e6e5caa0df746117c071744d6ca789421ceb2701c427842399f899be93923085228408f12e1f7115d7b233fb0c09fd0946ae3f4b6a8c7e4179b141a19e3facc4e16c94c2b314d6f5d8f5e1098ce0eaf4a066139f5bd668844b6580ed55f51ea34d3326fb520393d3d119c056df0b6cadc898e47d78d99705aa395db5f22cfa9d7f96628f9ae62c043f7f775ab9c5a766df433b0764793c01c87e19fe69284143300a5bb9c62223e67667f1c2c4091ba1a71c6a0c82e72cd686c2a2e223443664fe0af50ef2239d5eb9e5f72fc82708dc66c6dfabe7c6c507014a3bf01297757afbadd79c309b009913f18ac9a452c50b25a9c84f3f90380fa838ad2bc78bfffc08868afc40128cbff5e52c3f4795a45138f2fc8666c89e07b0e826e3ac290ee1941289dfca822b9c8b305350adc287df8934d5af1322b6b9e5b9d8c5815b175f33a2e7035603df737c058f88158401b06caba3a500474a90de98a40eccf9116c1aa0dcab53ffd59f331238fba0b086093c90778bdefbad7d43207f8b86159d4c2f35a1b89f4299678bd0df53cc0467bf25f24efdf911b106056996fe38ffa04e04fe98f399edfbb2a49dd50934bf07a6f1a8fac3b4e4fc4d9d690fea2b508fce4d5505100380f0c087591b9f655e9f054b627d0c4e1a534c68709cfff3240d5320624f480504d8ad89d80c48f4eda90d5bbeebdf8f52cf4712851cd70308a0763f1cb521b09b0b34edc5dedcee264237d67c28ca71b0f4a2d023bb7d42ba654b3702d481624d1d7d10e291f4a1086f95c9a7f54f40b83b90f6220edea62c6a36142d5ca87d2fbfb6ab778a4c4b8e7c699fc3bf31221643153e2b89f477d503774b30da577e8398b8be7d9dd89f3da590a430a84cd0b9382bc1808b570cebf1cb049ff7896b5e480857bb64d30204f7467d97b03b659f18a1aafbf537f7603427741fe14e710bf13bd3c61ac7ed3c640e4d9c5750e1e1bf125f8be13d79bc2341a801e34e7918947cde01fe4e1d415a54d16615c9f7c54670abc8f7c6b4f2e83352f01acea0906c367ead0b9afba8db2c8760612f1d9dae18ad4eb2d1fe5ba4b6ad921ee05a3d432dc0013c19c13a003e8bd774fba1317f6fec780c91ef79433593822d8f2bac5b3000fc4596e2e9f9bab1d4aac0156b54dcf65a3431b9ee25110b64b711035d0511af521be4de305f2b765554b2a908ad061f09860b624965638b8a7561bb7125473f7fcd1785badd724ac04480db10ee9f8132d3b1ac64368a709f06bcf8c4aa6097d580c0cc9f232663210e156322df208333c9a72ffd27d5eb732cc282269b5b4c56d6d1c950013d7c8cc3bf9d989ed6c5d6a7d6c5bcfcf0564efe9b5d742ea5e762add334a8d7d483bdcf1db508015ac2767da06641e91b819e8ccbb4564cf3fd7046530367e3d2fe6d4a443bc97a6954413f0ad689d3194d9aa948083a7aa292dd5ee54826fbc294bf33778f650ee98d0130bcfa9d638637707737567dc3eb2b27a5a3ab2528024b16c60e10c7430b3b9858f41ddf9e256a8b58114d5b870f8841c18b3849d33dba14865bf00c61a748781974ff0b16bd299768c5449e9bc3832f590908660815bdc9f6755a719a32e5a79fedeb662931c4aa3c62af8dc846c4e7419c94765381c8eec1c001592b1fc453ee31981905d97c6809ee29c7d641738aa7462020d47d6d2a2623e6031e5e02c3956e988f9bf1f6e80593e2139dd9bed9c241e812a67a6dfffe5e1c2af55175e8e51c94e9a10177cf4cae4decb7163782e5f3097266b7310b8b5dd71819f61f4d5c1b5657cfa2b2cf47385c1fbc14077e519226a57233f0db238c15190b521f48c2a71817108cdaa34fdfb2d3c48041c5d6067865cc1f55971fc100e21e64f437290f00bfe99918ed07e58b2512a1315d70537e926565a3a73b130f4940a188a70a47b6472bd790412e9949d0f291ce95fcaf8c0a9f723ebd52375a8d000c98aa182ad679c62b99c2bbb08a6af62b72523562d4b2b8a005089f7"
pksm2_bytes = binascii.unhexlify(pksm2_hex)
pksm2 = PreKeySignalMessageProto()
# msg format (as serialized by rust): type (1 byte) + protobuf serialized message
pksm2.ParseFromString(pksm2_bytes[1:])
assert len(pksm2.message) == len(pksm_ctxt.message().serialized())

sm = SignalMessageProto()
sm_hex = "440a2105fa6815abe2e1ca99ee379191901d2c9c0576b56190d118897a59e19c0260b00f1000180022a001ad210cda198754510efbfa77540f57da350478544a3a5667551e93f5ac6b7f616f60e8613f0f9c77c853fb5f64a7195ccf34bfee7d934a3578dd4037f871d0e70f74557525edb5650292e7c81b031f42eb4e772b88e9296bf2f113b81cb0ab42196c62c9aec960476360068924947baf2b93b6d05ed790289d70bd27b843e5a1c1c0df38681bdf267db86082bccb268f4131af5faa7c39f0eb562945049a345ca6353abdc3b960aa"
sm_bytes = binascii.unhexlify(sm_hex)

# TODO: better to use signal_protocol.protocol.SignalMessage.try_from then the raw protobufs
# msg format (as serialized by rust): type (1 byte) + protobuf serialized message + mac_tag (8 bytes)

sm.ParseFromString(sm_bytes[1:-8])
sm_obj = SignalMessage.try_from(sm_bytes)
assert sm_obj.serialized().hex() == sm_hex
pksm_obj = PreKeySignalMessage.try_from(pksm2_bytes)
assert pksm_obj.serialized().hex() == pksm2_hex
# END TODO

base64_msg = "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"
from base64 import b64decode
extracted_msg = b64decode(base64_msg)
# print(len(pksm2.message), len(pksm.message))

# for Alice to trust bob, or it'd fail
# print(store.save_identity(recipient_address, b_bundle.identity_key()))
store.save_identity(recipient_address, b_bundle.identity_key())
# from signal_protocol.protocol import PreKeySignalMessage
print("Should fail since I don't have B's IdentityKeyPair")
session_cipher.message_decrypt(store, recipient_address, pksm_ctxt)